// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PayUOlaMoneySDK
import Foundation
import PayULogger
import PayUNetworking
import Swift
import UIKit
public enum PayUOMSecureEndPoint {
  case securePayment
  public var baseURL: Foundation.URL {
    get
  }
  public static func == (a: PayUOlaMoneySDK.PayUOMSecureEndPoint, b: PayUOlaMoneySDK.PayUOMSecureEndPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension UIDevice {
  public static let payuModelName: Swift.String
}
public enum PayUOMNetworkEnvironment : Swift.String {
  case production
  case test
  case mobiletest
  case mobileDev
  case sdkTest
  case bizcheckouttest
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class PayUOMAPI {
  public class func checkElegibility(withPaymentParams params: PayUOlaMoneySDK.PayUOMPaymentParams, completion: @escaping (Swift.Result<PayUOlaMoneySDK.PayUOMEligibilityModel, PayUOlaMoneySDK.PayUError>) -> ())
  @objc deinit
}
public struct PayUOMHashes {
  public var paymentHash: Swift.String?
  public var eligibilityHash: Swift.String?
  public init()
}
public typealias PayUResponseType = Swift.Result<Swift.Dictionary<Swift.String, Any>, PayUOlaMoneySDK.PayUError>
public enum PayUOMValidationError {
}
public enum PayUOMSDKError {
  public static let socketURLError: Swift.String
  public static let decodingError: Swift.String
  public static let dataUnavailable: Swift.String
  public static let backButtonTxnCancelled: Swift.String
  public static let unknownErrorMsg: Swift.String
  public static let internetUnavailable: Swift.String
}
public enum PayUError : Foundation.LocalizedError {
  case error(_: Swift.String)
  case unknownError
  case noInternet
  public var description: Swift.String {
    get
  }
  public static func == (lhs: PayUOlaMoneySDK.PayUError, rhs: PayUOlaMoneySDK.PayUError) -> Swift.Bool
}
public class PayUOMCore {
  public static let shared: PayUOlaMoneySDK.PayUOMCore
  public var environment: PayUOlaMoneySDK.PayUOMNetworkEnvironment
  public var logLevel: PayULogger.PayULogLevel {
    get
    set
  }
  public var txnStartTime: Foundation.Date?
  public func checkEligibility(params: PayUOlaMoneySDK.PayUOMPaymentParams, completion: @escaping (Swift.Bool, PayUOlaMoneySDK.PayUOMEligibilityModel?, Swift.Error?) -> Swift.Void)
  public func getPostData(params: PayUOlaMoneySDK.PayUOMPaymentParams) -> Swift.String
  @objc deinit
}
public class PayUOMAnalyticsSender {
  public class func sendOneTimeAnalytics()
  @objc deinit
}
public class PayUOMValidator {
  public class func isValidMobile(_ mobile: Swift.String) -> Swift.Bool
  @objc deinit
}
public class PayUOMCoreUtils {
  public class func getVersionOfBundle(_ bundle: Foundation.Bundle) -> Swift.String
  public class func getJsonStringForElegibilityAPI(fromParams params: PayUOlaMoneySDK.PayUOMPaymentParams) -> Swift.String
  @objc deinit
}
public struct PayUOMPaymentParams {
  public var merchantKey: Swift.String
  public var transactionId: Swift.String
  public var amount: Swift.String
  public var productInfo: Swift.String
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var email: Swift.String
  public var phoneNumber: Swift.String
  public var udf1: Swift.String
  public var udf2: Swift.String
  public var udf3: Swift.String
  public var udf4: Swift.String
  public var udf5: Swift.String
  public var userCredentials: Swift.String?
  public var offerKey: Swift.String?
  public var hashes: PayUOlaMoneySDK.PayUOMHashes?
  public var surl: Swift.String?
  public var furl: Swift.String?
  public init(merchantKey: Swift.String, transactionId: Swift.String, amount: Swift.String, productInfo: Swift.String, firstName: Swift.String, lastName: Swift.String, email: Swift.String, phoneNumber: Swift.String, udf1: Swift.String, udf2: Swift.String, udf3: Swift.String, udf4: Swift.String, udf5: Swift.String) throws
}
public struct PayUOMEligibilityModel : Swift.Codable {
  public let status: Swift.Int
  public let msg: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension PayUOlaMoneySDK.PayUOMSecureEndPoint : Swift.Equatable {}
extension PayUOlaMoneySDK.PayUOMSecureEndPoint : Swift.Hashable {}
extension PayUOlaMoneySDK.PayUOMNetworkEnvironment : Swift.Equatable {}
extension PayUOlaMoneySDK.PayUOMNetworkEnvironment : Swift.Hashable {}
extension PayUOlaMoneySDK.PayUOMNetworkEnvironment : Swift.RawRepresentable {}
